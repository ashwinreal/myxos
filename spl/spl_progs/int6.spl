alias phySP S0;
phySP = (SP%512) + ([PTBR + 2*(SP/512)]*512);
alias syscallno S1;
syscallno = [phySP-1];
alias ctr S2;
alias arg1 S3;
alias ctr2 S4;
alias newpages S5;
alias procpcb S10;
alias fat S11;
//exec

if(syscallno==9) then
	arg1= [phySP-3];  //filename of new process as the arg
	print("exec int");
	ctr=0;
	ctr2=0;
	procpcb=READY_LIST + ((PTBR-1024)/8)*32;

	ctr=0;
	//check if file exists
	while(ctr<64) do
		if([5*512 + 8*ctr]==arg1) then
			break;
		endif;
		ctr=ctr+1;
	endwhile;
	if(ctr==64) then
	//	print("inval. inp");
		[phySP-2]=-1;
		ireturn;
	endif;
	fat=ctr;

	


	//print([5*512 + 8*ctr + 2]);
	
	load(1,[5*512 + 8*ctr + 2]) ;//load the basic blck
	//print("bb loaded");
	ctr=0;
	ctr2=0;

	//------I think we need this?
	ctr=0;
	while(ctr<512 && [512 + ctr]!=-1 && [512 + ctr]!="" ) do
		ctr=ctr+1;
	endwhile;
	if(ctr>=4) then
		print(">=4");
		[phySP-2]=-1;
		ireturn;
	endif;
	//-------

//----------------------------------------------------
	//steps 3,4 deleted
//-------------------------------------

	ctr=0;
	ctr2=0;
	while(ctr<=2) do   //decrement code pages's memory
		if([PTBR + 2*ctr + 1] == "01" || [PTBR + 2*ctr + 1] == "11") then
			[1280 + [PTBR + 2*ctr]]=  [1280 + [PTBR + 2*ctr]] -1;
		//else if( [PTBR + 2*ctr] >=448) then                               
		///		[6*512 + [PTBR + 2*ctr]] = [6*512 + [PTBR + 2*ctr]] -1;   // stage 10 mod not required 
		//	endif;
		endif;
		ctr=ctr+1;
	endwhile;

	ctr=0;
	while(ctr<=2 && [512 + ctr]!=-1 && [512 + ctr]!="" ) do    // give the data block nos only(virtual mem)
		[PTBR + 2*ctr ]= [512 +ctr];
		[PTBR + 2*ctr + 1] = "00" ;
		ctr=ctr+1;
	endwhile;
	while(ctr<=2) do
		[PTBR + 2*ctr ]= -1;
		[PTBR + 2*ctr + 1] = "00" ;
		ctr=ctr+1;
	endwhile;
	[PTBR + 2*3 + 1] = "01" ; //stack is valid





	[1472 + [procpcb]] =fat;  // S10 mod !!!!!!!!!!!!!!!!
	breakpoint;









		//////////close all open files
		
		ctr2=0;
		while(ctr2<8) do

			ctr=0;
			arg1=ctr2;
			//print("inwhile");
			if([procpcb+15+2*arg1]!=-1) then 
			//	print("here");
				ctr=[procpcb+15+2*arg1] ; // ctr stores pointer to sys wide 
	
				//print(ctr);
	
				//ctr2=[FILE_TABLE + 2*ctr + 1]; //????????
	
				[FILE_TABLE + 2*ctr + 1]=[FILE_TABLE + 2*ctr + 1]-1;  // decrease the file count

				// dbt: did not work when : [FILE_TABLE + 2*[FILE_TABLE + 2*[ctr] + 1]+ 1]=[FILE_TABLE + 2*[FILE_TABLE + 2*[ctr] + 1] + 1]-1; 
	
				///ctr2=[FILE_TABLE + 2*ctr + 1];     //??????
	

				if([FILE_TABLE + 2*[procpcb+15+2*arg1]+1]==0) then
					[FILE_TABLE + 2*[procpcb+15+2*arg1]]=-1; //if 0 file count invalidate  sys wide entry
					
				endif;

				[procpcb+15+2*arg1]=-1;    // invalidate per proc entry
				[procpcb+15+2*arg1 + 1]="00";
		
			endif;

			ctr2=ctr2+1;
		endwhile;

	ctr=0;


	
	SP=3*512;

	[phySP]=0;
	//print("exec over");
	[1024 + [procpcb]*8 + 6 + 1]="01";
	[[1024 + [procpcb]*8 + 6 + 0]*512]=0;        // put ip 0 in start of stack
	//breakpoint;
	ireturn;

endif;


//getpid
if(syscallno==11) then
	//print("pid is");
	procpcb=READY_LIST + ((PTBR-1024)/8)*32;
	[phySP-2]=[procpcb + 0];
	ireturn;
endif;


//getppid
if(syscallno==12) then
	procpcb=READY_LIST + ((PTBR-1024)/8)*32;
	[phySP-2]=[procpcb + 31];
	ireturn;
endif;



